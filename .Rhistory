class(myData)
cnames <- c('patient','age','weight','bp','rating','test')
colnames(myData) <- cnames
myData
swirl()
source("http://bioconductor.org/biocLite.R")
biocLite()
exit
clear
ls()
rm("cnames")
ls()
collapse(ls(),sep=",")
paste(ls(),sep=",")
a = ls()
a
?paste
paste(ls(),collapse=",")
rm(paste(ls(),collapse=","))
rm(ls())
for i in ls() {rm(i)}
for (i in ls()) {rm(i)}
for (i in ls()) {i}
for (i in ls()) {print(i)}
for (i in ls()) {rm(i)}
for (i in ls()) {rm(str(i))}
for (i in 1:length(a) {rm(a[i])}
for (i in 1:length(a)) {rm(a[i])}
for (i in 1:length(a)) {print(a[i])}
rm(i)
rm("a")
for (i in 1:length(ls())) {print(i)}
for (i in 1:length(ls())) {rm(ls()[i])}
rm(list=ls())
quit()
license()
x <- c('a','b','c','d')
for(i in 1:4) {print(x[i])}
for(i in seq_along(x)) {print(x[i])}
for(letters in x){print(letters)}
for(i in 1:4) print(x[i])
x <- matrix(1:6,2,3)
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i,j])
}}
seq_along(x)
x
seq_len(x)
seq_len(10)
?seq_len
rm(list(ls()))
rm(list=ls())
count <- 0
while(count< 10) {
print(count)
count <- count + 1
}
x <- 5
z <- 5
while(z>=3 && z <= 10) {
print(z)
coin <- rbinom(1,1,0.5)
if(coin==1) {z<-z+1} else {z<-z-1}
}
?rbinom
rbinom(5,1,0.5)
rbinom(5,5,0.5)
x0 <-1
tol <- 1e-8
repeat {x1 <- computeEstimate()
if(abs(x1-x0) < tol) {break} else {x0 <- x1}
}
for(i in 1:100) {
if(i<=20) next}
if(i<=20) next else print(i)}
if(i<=20) next else {print(i)}}
for(i in 1:100) {
if(i<=20) next else print(i)}
f <- function(x) {
x^x
}
f(2)
f(5)
f(6)
f(10)
f <- function(x) {
x*f(x-1)
}
f(4)
f <- function(x) {
if(x>=2) {
x*f(x-1)
} else {break}
}
f(4)
f <- function(x) {
if(x>=2) {
x*f(x-1)
} else {return}
}
f(4)
mydata<- rnorm(100)
sd(mydata)
sd(x=mydata)
x
sd(x=mydata,na.rm=T)
sd(na.rm=F,x=mydata)
sd(na.rm=F,mydata)
rm(list=ls())
args(lm)
mydata = rnorm(100)
lm(data=mydata,y~x,model=F,1:1000)
y = rnorm(100)
lm(data=mydata,y~x,model=F,1:100)
lm(mydata)
lm(data=mydata,y~x,model=F,1:100)
args(lm)
f <- function(a, b) {
a^2
}
f(2)
f <- function(a, b) {
print(a)
print(b)
}
f(45)
f(45,3)
print(2,3,4)
print([2,3,4])
print(1:4)
myplot <- function(x,y,type = "l",...) {
plot(x,y, type = type,...)
}
mean
args(paste)
args(cats)
args(cat)
?cat
cat('a','b')
paste('a','b',sep=":")
paste('a','b',se=":")
paste(1:5,6:9,sep = ";",collapse = "-")
paste(1:5,6:9,sep = ";")
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
if(class(x) != "matrix") return()
inv = NULL
set <- function(y) {
if(class(y)=="matrix") {
x <<- y
m <<- NULL
} else {
message("Note! The argument has to be a matrix.")
return()
}
get <- function() x
setInv <- function(inverse) inv <<- inverse
getInv <- function() inv
list(set = set, get = get, setInv = setInv, getInv = getInv)
}
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if(!is.null(inv)) {
message("accessing cache")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setInv(solve(inv))
inv
}
a <- matrix(rnorm(100),10,10)
a
b <- makeCacheMatrix(A)
b <- makeCacheMatrix(a)
b
b$get()
class(b)
b.get()
ls(b)
ls(as.environment(b))
ls(as.environment(b()))
b()
b$set(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
if(class(x) != "matrix") return()
inv <- NULL
set <- function(y) {
if(class(y)=="matrix") {
x <<- y
m <<- NULL
} else {
message("Note! The argument has to be a matrix.")
return()
}
get <- function() x
setInv <- function(inverse) inv <<- inverse
getInv <- function() inv
list(set = set, get = get, setInv = setInv, getInv = getInv)
}
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if(!is.null(inv)) {
message("accessing cache")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setInv(solve(inv))
inv
}
rm(b)
a
makeCacheMatrix()
b = makeCacheMatrix()
b
b$set(a)
class(a)
b
b$set
b$get
b$get()
rm(list=ls())
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInv <- function(inverse) inv <<- inverse
getInv <- function() inv
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setInv(inv)
inv
}
a <- makeCacheMatrix()
a$set
a$set(matrix(rnorm(100),10,10))
a
a$get()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
if(class(x)!="matrix") {return()}
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInv <- function(inverse) inv <<- inverse
getInv <- function() inv
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setInv(inv)
inv
}
b <- makeCacheMatrix(matrix(rnorm(100),10,10))
b$get()
b <- makeCacheMatrix(rnorm(100))
b
b
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
if(class(x)!="matrix") {
message("The argument has to be a matrix!")
return()
}
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInv <- function(inverse) inv <<- inverse
getInv <- function() inv
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setInv(inv)
inv
}
b <- makeCacheMatrix(rnorm(100))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
if(class(x)!="matrix") {
message("The argument has to be a matrix!")
return()
}
inv <- NULL
set <- function(y) {
if(class(y)!="matrix") {
message("The argument has to be a matrix!")
return()
}
x <<- y
inv <<- NULL
}
get <- function() x
setInv <- function(inverse) inv <<- inverse
getInv <- function() inv
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setInv(inv)
inv
}
b <- makeCacheMatrix()
b$set(rnorm(100))
b$get
b$get()
cacheSolve(b)
cacheSolve(a)
cacheSolve(a)
a$getInv()
a$get()%*%a$getInv()
round(a$get()%*%a$getInv(),0)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
if(class(x)!="matrix") {
stop("The argument has to be a matrix!")
}
inv <- NULL
set <- function(y) {
if(class(y)!="matrix") {
stop("The argument has to be a matrix!")
}
x <<- y
inv <<- NULL
}
get <- function() x
setInv <- function(inverse) inv <<- inverse
getInv <- function() inv
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setInv(inv)
inv
}
b <- makeCacheMatrix()
b$get()
b$set(matrix(rnorm(100),10,10))
b$get
b$get()
b$set(rnorm(100))
a <- makeCacheMatrix
a <- makeCacheMatrix()
cacheSolve(a)
a$getInv
a$getInv()
exit
q()
setwd("./ExData_Plotting1/")
data <- read.table("household_power_consumption.txt",header=T,sep=";",as.is=T)
data[,1] <- as.Date(data[,1])
data[,3:9] <- as.numeric(data[,3:9])
for(i in 3:9) data[,i] <- as.numeric(data[,i])
names(data)
data[data$Date == '2007-02-01',]
?date
data[data$Date == as.date('2007-02-01'),]
data$Date
data <- read.table("household_power_consumption.txt",header=T,sep=";",as.is=T)
strptime(data[1,1],"%d/%m/%y")
data[1,1]
strptime(data[1,1],"%dd/%mm/%yyyy")
strptime(data[1,1],"%d/%m/%y")
strptime(data[1,1],"%m/%d/%y")
strptime(data[1,1],"%y/%m/%d")
as.Data(data[1,1])
as.Date(data[1,1])
?as.Date
as.Date(data[1,1],"%d/%m/%y")
data[1,1]
as.numeric(data[1,1])
dates <- as.Date(data[,1])
head(unique(dates))
data[data$date=="2007-02-02",]
data[data$date=="02/02/2007",]
data[data$Date=="02/02/2007",]
class(data$Date)
data$Date[1]
as.Date(data$Date[1])
as.Date(data$Date[1],"%T")
as.Date(data$Date[1],"%X")
as.Date(data$Date[1],"%d/%m/%y")
as.Date(data$Date[1],"%m/%d/%y")
as.Date(data$Date[1],"%d/%y/%m")
as.Date(data$Date[1],"%y/%d/%m")
as.Date(data$Date[1],"%y/%m/%d")
a = data$Date[1]
a[2]
a[[2]]
for(char in a) print(char)
length(a)
nchar(a)
a.nchar(!)
a.nchar(1)
character(a)
data2 <- read.table("household_power_consumption.txt",header=T,sep=";")
rm(list=c('a','char','dates','i'))
class(data2[,1])
data2[1,1]
as.Data(data2[1,1])
as.Date(data2[1,1])
data2[data2$Date == '10/10/2007',]
data2[data2$Date == '02/02/2007',]
names(data$Date)
summary(data$Date)
summary(data2$Date)
a = unique(data2$Date)
a
a$Levels
a$levels
a$level
levels(a)
data2[data2=='02/02/2007',]
data2[data2$Date=='02/02/2007',]
data2[data2$Date=='2/2/2007',]
data2[data2$Date=='1/2/2007',]
data$Dates
data$Date
a <- unique(data$Date)
head(a)
a
?read.txt
a[a=='2/2/2007']
a[a=='1/2/2007']
a[a=='2/1/2007']
as.Date(a)
as.Date(a,"%d/%m/%y")
